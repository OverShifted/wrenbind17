<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WrenBind17</title>
    <link>https://matusnovak.github.io/wrenbind17/</link>
    <description>Recent content on WrenBind17</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://matusnovak.github.io/wrenbind17/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/installation/</guid>
      <description>You don&amp;rsquo;t need to compile this library. This library is a header only and all you have to do is to include the #include &amp;lt;wrenbind17/wrenbind17.hpp&amp;gt; header in your C++ project.
This library will need the Wren main header file: &amp;lt;wren.hpp&amp;gt; so make sure your build system has a search path for that header. You will also need to link the Wren library, otherwise you will get linker errors. To see how to build and use the Wren library, see Getting Started section here from the official Wren documentation.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/hello-world/</guid>
      <description>First, create a wren::VM instance, run the source code, find the method you want to run, and execute the method. In the example below, we are printing out a simple &amp;ldquo;Hello World&amp;rdquo; to the console. It is recommended that you create an alias from wrenbind17 to wren so you don&amp;rsquo;t have to type that many characters every time. I highly encourage you to NOT to use using namespace wrenbind17;!
#include &amp;lt;wrenbind17/wrenbind17.</description>
    </item>
    
    <item>
      <title>Executing code</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/executing-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/executing-code/</guid>
      <description>Executing Wren code can be done in the following ways:
// Execute from raw std::string and specify the module name manually. // Can be any module name you want! vm.runFromSource(&amp;#34;main&amp;#34;, &amp;#34;var i = 42&amp;#34;); // Same as above, specify the module name but instead // of the source code you tell it where the file is located. vm.runFromFile(&amp;#34;main&amp;#34;, &amp;#34;path/to/some/main.wren&amp;#34;); // Run specific module. This module must be an existing file &amp;#34;utils/libB.</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/modules/</guid>
      <description>Wren support modularity (official documentation here), but does not exactly work out of the box. WrenBind17 fills this gap by using a look-up paths. If you are familiar with Python, this is almost the same as the Python home path for loading modules.
When creating an instance of the VM, the first argument is a list of paths to use for lookup, for example:
std::vector&amp;lt;std::string&amp;gt; paths = { &amp;#34;some/relative/path&amp;#34;, &amp;#34;C:/absolute/path&amp;#34; }; wren::VM vm(paths);  But, it is highly advised to use absolute paths.</description>
    </item>
    
    <item>
      <title>Exceptions</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/exceptions/</guid>
      <description>WrenBind17 has a single base exception: wrenbind17::Exception (inherits std::exception) with the following derived exceptions:
 wrenbind17::NotFound - Throw when trying to find a variable or a static class inside of a Wren via wrenbind17::VM::find(module, name). wrenbind17::BadCast - When passing values into Wren, for example when trying to pass in a class that has not been registered. wrenbind17::RuntimeError - When calling a Wren method via wrenbind17::Method::operator().  Example of such runtime error:</description>
    </item>
    
    <item>
      <title>Bind C&#43;&#43; class</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/bind-cpp-class/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/bind-cpp-class/</guid>
      <description>To bind a C++ class, you will first need to create a new module. Creating a new module is done per VM instance. If you have multiple VMs in your application, they won&amp;rsquo;t share the same modules. You would have to create the module for each of your VM instances. Copying modules between instances is not possible.
wren::VM vm; // Create module called &amp;#34;mymodule&amp;#34; auto&amp;amp; m = vm.module(&amp;#34;mymodule&amp;#34;);  You can create as many modules as you want.</description>
    </item>
    
    <item>
      <title>Abstract classes</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/abstract-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/abstract-classes/</guid>
      <description>What if you want to pass an abstract class to Wren? You can&amp;rsquo;t allocate it, but you can only pass it around as a reference or a pointer? Imagine a specific derived &amp;ldquo;Entity&amp;rdquo; class that has a common abstract/interface class?
The only thing you have to do is to NOT to add constructor by calling ctor.
wren::VM vm; auto&amp;amp; m = vm.module(&amp;#34;mymodule&amp;#34;); // Add class &amp;#34;Vec3&amp;#34; auto&amp;amp; cls = m.klass&amp;lt;Entity&amp;gt;(&amp;#34;Entity&amp;#34;); // cls.</description>
    </item>
    
    <item>
      <title>Overload operators</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/overload-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/overload-operators/</guid>
      <description>Arithmetic and comparison operators Overloading operators is done same as binding any other methods. The only difference is that you have to use the operator enumeration instead of the name. But first, your C++ class must support the operators you want to bind, for example:
class Vec3 { public: Vec3(float x, float y, float z) : x(x), y(y), z(z) { } Vec3 operator - () const { // Unary negation operator  .</description>
    </item>
    
    <item>
      <title>Call Wren and pass variables</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/call-wren/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/call-wren/</guid>
      <description>Basics In order to call Wren functions, you will need to define those functions in a Wren class. The most common way to do that is to declare the function as a static function:
class Main { static main(a, b) { return a + b } }  To find the function, you will first need to compile the source and look for the specific class by its name. When you get the class, you can find the any specific member function inside of that class.</description>
    </item>
    
    <item>
      <title>Call C&#43;&#43; and pass variables</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/call-cpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/call-cpp/</guid>
      <description>Calling C++ class methods from Wren is easy. (See Bind C++ Class tutorial). But, what if you want to return a C++ class instance from a C++ member function, or the other way around?
Return class instance from C++ Consider the following example:
class Foo { public: Foo() = default; Foo getAsCopy(); Foo* getAsPointer(); Foo&amp;amp; getAsReference(); const Foo&amp;amp; getAsConstReference(); std::shared_ptr&amp;lt;Foo&amp;gt; getAsShared(); }; int main() { ... wren::VM vm(...); auto&amp;amp; m = vm.</description>
    </item>
    
    <item>
      <title>Raw Modules</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/raw-modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/raw-modules/</guid>
      <description>Modules can be created in the following way:
wren::VM vm; auto&amp;amp; m = vm.module(&amp;#34;mymodule&amp;#34;); auto&amp;amp; cls = m.klass&amp;lt;Entity&amp;gt;(&amp;#34;Entity&amp;#34;); cls.func&amp;lt;&amp;amp;Entity::foo&amp;gt;(&amp;#34;foo&amp;#34;); ...  But, you are also able to create your own &amp;ldquo;raw&amp;rdquo; modules.
wren::VM vm; auto&amp;amp; m = vm.module(&amp;#34;mymodule&amp;#34;); m.append(R&amp;#34;( class Vec3 { construct new (x, y, z) { ... } } )&amp;#34;);  Anything you add via m.append(...) will be loaded into the Wren when you import that specific module. Anything you put inside of append(.</description>
    </item>
    
    <item>
      <title>Inheritance via composition</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/inheritance/</guid>
      <description>Wren does not support inheritacne of foreign classes, but there is a workaround. Consider the following C++ class:
class Entity { public: Entity() { ... } virtual ~Entity() { ... } virtual void update() = 0; };  Now we want to have our own class in Wren:
import &amp;#34;game&amp;#34; for Entity class Enemy is Entity { // Not allowed by Wren :(  construct new (...) { } update() { // Do something specific for Entity class  } }  This does not work.</description>
    </item>
    
    <item>
      <title>Callbacks via Fn.new</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/callbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/callbacks/</guid>
      <description>Let&amp;rsquo;s say you have a GUI button widget and you want to have a specific action when a user clicks on it.
class GuiButton { public: GuiButton(std::function&amp;lt;bool(int)&amp;gt; func) : func(std::move(func)) { } virtual ~GuiButton() { } bool event(int type) { return func(type); } private: std::function&amp;lt;bool(int)&amp;gt; func; };  And now you would like to create this class in Wren and add some custom Wren function as the callback. What you can do is to create a Wren specific wrapper and accept a class instance (in this case, Fn class instance from Wren).</description>
    </item>
    
    <item>
      <title>Upcasting</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/upcasting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/upcasting/</guid>
      <description>Upcasting is when you have a derived class Enemy and you would like to upcast it to Entity. An Enemy class is an Entity, but not the other way around. Remember, upcasting is getting the base class!
But, this might be a problem when, for example, you have created a derived class inside of the Wren, and you are passing it into some C++ function that accepts the base class. What you have to do is to tell the Wren what base classes it can be upcasted to.</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/lists/</guid>
      <description>Pre-made STL vector and list bindings Lists are not implemented in this library natively. However, they are added as an optional classes that you can use. The std::vector&amp;lt;T&amp;gt; and std::list&amp;lt;T&amp;gt; are implemented via wren::StdVectorBindings&amp;lt;T&amp;gt;::bind(module, name); and as wren::StdListBindings&amp;lt;T&amp;gt;::bind(module, name);. For example:
Wren::VM vm; auto&amp;amp; m = vm.module(&amp;#34;std&amp;#34;); wren::StdVectorBindings&amp;lt;int&amp;gt;::bind(m, &amp;#34;VectorInt&amp;#34;);  And the Wren code:
import &amp;#34;std&amp;#34; for VectorInt var v = VectorInt.new() v.add(42) // Push new value v.insert(-1, 20) // Insert at the end v.</description>
    </item>
    
    <item>
      <title>Pass multiple types to C&#43;&#43;</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/variant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/variant/</guid>
      <description>Basic example Using std::variant is nothing special. When you pass it into Wren, what happens is that this library will check what type is being held by the variant, and then it will pass it into the Wren code. The Wren will not get the variant instace, but the value it holds! For example, passing std::variant&amp;lt;bool, int&amp;gt; will push either bool or int into Wren.
The same goes for getting values from Wren as variant.</description>
    </item>
    
    <item>
      <title>Customize VM behavior</title>
      <link>https://matusnovak.github.io/wrenbind17/tutorial/customize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/tutorial/customize/</guid>
      <description>Min heap and growth To control the minimal heap, heap growth, and initial heap, use the constructor to do so. Example:
#include &amp;lt;wrenbind17/wrenbind17.hpp&amp;gt;namespace wren = wrenbind17; // Alias  int main(...) { // These values are default.  // If you leave the constructor empty, these exact  // values will be used.  // The lookup paths for loading other Wren files  std::vector&amp;lt;std::string&amp;gt; paths = {&amp;#34;./&amp;#34;}; // The initial heap that will be created on init  const size_t initHeap = 1024 * 1024; // 1MB  // The minimal heap to shrink to  const size_t minHeap = 1024 * 1024 * 10; // 10MB  // The growth size  const int heapGrowth = 50; // 50%  // Constructor  wren::VM vm(paths, initHeap, minHeap, heapGrowth); }  Print function The print function is defined as:</description>
    </item>
    
    <item>
      <title>include</title>
      <link>https://matusnovak.github.io/wrenbind17/files/dir_d44c64559bbebec7f509842c48db8b23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/dir_d44c64559bbebec7f509842c48db8b23/</guid>
      <description>include Dir Reference
Directories    Name     include/wrenbind17    Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>include/wrenbind17</title>
      <link>https://matusnovak.github.io/wrenbind17/files/dir_0603dac12b22d4faefe24b335e5b06be/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/dir_0603dac12b22d4faefe24b335e5b06be/</guid>
      <description>include/wrenbind17 Dir Reference
Files    Name     include/wrenbind17/wrenbind17.hpp   include/wrenbind17/vm.hpp   include/wrenbind17/variable.hpp   include/wrenbind17/std.hpp   include/wrenbind17/push.hpp   include/wrenbind17/pop.hpp   include/wrenbind17/object.hpp   include/wrenbind17/module.hpp   include/wrenbind17/method.hpp   include/wrenbind17/index.hpp   include/wrenbind17/handle.hpp   include/wrenbind17/foreign.hpp   include/wrenbind17/exception.hpp   include/wrenbind17/caller.hpp   include/wrenbind17/any.hpp   include/wrenbind17/allocator.hpp    Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>include/wrenbind17/allocator.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/allocator_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/allocator_8hpp/</guid>
      <description>include/wrenbind17/allocator.hpp File Reference
Namespaces    Name     wrenbind17    Source code #pragma once  #include &amp;#34;index.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34; namespace wrenbind17 { void setNextError(WrenVM* vm, std::string str); #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename T, typename... Args&amp;gt; struct ForeignKlassAllocator { static T* ctor(Args&amp;amp;&amp;amp;... args) { return new T(std::forward&amp;lt;Args&amp;gt;(args)...); } template &amp;lt;size_t... Is&amp;gt; static T* ctorFrom(WrenVM* vm, detail::index_list&amp;lt;Is...&amp;gt;) { return ctor(PopHelper&amp;lt;Args&amp;gt;::f(vm, Is + 1).</description>
    </item>
    
    <item>
      <title>include/wrenbind17/any.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/any_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/any_8hpp/</guid>
      <description>include/wrenbind17/any.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::Any::Data   class wrenbind17::Any::Content   class wrenbind17::Any    Source code #pragma once  #include &amp;lt;typeinfo&amp;gt;#include &amp;#34;handle.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34; namespace wrenbind17 { class Any { public: class Content { public: virtual ~Content() { } virtual const std::type_info&amp;amp; getTypeid() const = 0; }; template &amp;lt;typename T&amp;gt; class Data : public Content { public: template &amp;lt;typename Arg&amp;gt; Data(Arg arg) : value(std::move(arg)) { } virtual ~Data() = default; const std::type_info&amp;amp; getTypeid() const override { return typeid(T); } T&amp;amp; get() { return value; } const T&amp;amp; get() const { return value; } private: T value; }; inline Any() : content(nullptr) { } inline explicit Any(WrenVM* vm, const bool value) : vm(vm), type(WrenType::WREN_TYPE_BOOL), content(new Data&amp;lt;bool&amp;gt;(value)) { } inline explicit Any(WrenVM* vm, const double value) : vm(vm), type(WrenType::WREN_TYPE_NUM), content(new Data&amp;lt;double&amp;gt;(value)) { } inline explicit Any(WrenVM* vm, std::string value) : vm(vm), type(WrenType::WREN_TYPE_STRING), content(new Data&amp;lt;std::string&amp;gt;(std::move(value))) { } inline explicit Any(WrenVM* vm, std::nullptr_t value) : vm(vm), type(WrenType::WREN_TYPE_NULL), content(nullptr) { } inline explicit Any(WrenVM* vm, void* value) : vm(vm), type(WrenType::WREN_TYPE_FOREIGN), content(new Data&amp;lt;void*&amp;gt;(value)) { } inline Any(const Any&amp;amp; other) = delete; inline Any(Any&amp;amp;&amp;amp; other) noexcept { swap(other); } inline Any&amp;amp; operator=(const Any&amp;amp; other) = delete; inline Any&amp;amp; operator=(Any&amp;amp;&amp;amp; other) noexcept { if (this !</description>
    </item>
    
    <item>
      <title>include/wrenbind17/caller.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/caller_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/caller_8hpp/</guid>
      <description>include/wrenbind17/caller.hpp File Reference
Namespaces    Name     wrenbind17    Source code #pragma once  #include &amp;#34;push.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34;#include &amp;#34;index.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper { static inline void push(WrenVM* vm, int index, R ret) { PushHelper&amp;lt;R&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;R&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, R&amp;amp; ret) { PushHelper&amp;lt;R*&amp;gt;::f(vm, index, &amp;amp;ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;const R&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, const R&amp;amp; ret) { PushHelper&amp;lt;R*&amp;gt;::f(vm, index, &amp;amp;const_cast&amp;lt;R&amp;amp;&amp;gt;(ret)); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;R*&amp;gt; { static inline void push(WrenVM* vm, int index, R* ret) { PushHelper&amp;lt;R*&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;const R*&amp;gt; { static inline void push(WrenVM* vm, int index, const R* ret) { PushHelper&amp;lt;const R*&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;R&amp;amp;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, R&amp;amp;&amp;amp; ret) { PushHelper&amp;lt;R&amp;gt;::f(vm, index, std::move(ret)); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;const std::shared_ptr&amp;lt;R&amp;gt;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, const std::shared_ptr&amp;lt;R&amp;gt;&amp;amp; ret) { PushHelper&amp;lt;const std::shared_ptr&amp;lt;R&amp;gt;&amp;amp;&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;std::shared_ptr&amp;lt;R&amp;gt;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, std::shared_ptr&amp;lt;R&amp;gt;&amp;amp; ret) { PushHelper&amp;lt;std::shared_ptr&amp;lt;R&amp;gt;&amp;amp;&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;const std::variant&amp;lt;R&amp;gt;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, const std::variant&amp;lt;R&amp;gt;&amp;amp; ret) { PushHelper&amp;lt;const std::variant&amp;lt;R&amp;gt;&amp;amp;&amp;gt;::f(vm, index, ret); } }; template &amp;lt;typename R&amp;gt; struct ForeginMethodReturnHelper&amp;lt;std::variant&amp;lt;R&amp;gt;&amp;amp;&amp;gt; { static inline void push(WrenVM* vm, int index, std::variant&amp;lt;R&amp;gt;&amp;amp; ret) { PushHelper&amp;lt;std::variant&amp;lt;R&amp;gt;&amp;amp;&amp;gt;::f(vm, index, ret); } }; template &amp;lt;&amp;gt; inline void ForeginMethodReturnHelper&amp;lt;const std::string&amp;amp;&amp;gt;::push( WrenVM* vm, int index, const std::string&amp;amp; ret) { PushHelper&amp;lt;const std::string&amp;amp;&amp;gt;::f(vm, index, ret); } template &amp;lt;&amp;gt; inline void ForeginMethodReturnHelper&amp;lt;std::string&amp;amp;&amp;gt;::push(WrenVM* vm, int index, std::string&amp;amp; ret) { PushHelper&amp;lt;std::string&amp;amp;&amp;gt;::f(vm, index, ret); } template &amp;lt;typename R, typename T, typename.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/exception.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/exception_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/exception_8hpp/</guid>
      <description>include/wrenbind17/exception.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::CompileError   class wrenbind17::RuntimeError   class wrenbind17::BadCast   class wrenbind17::NotFound   class wrenbind17::Exception    Source code #pragma once  #include &amp;lt;stdexcept&amp;gt; namespace wrenbind17 { class Exception : public std::exception { public: Exception() = default; explicit Exception(std::string msg) : msg(std::move(msg)) { } const char* what() const throw() override { return msg.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/foreign.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/foreign_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/foreign_8hpp/</guid>
      <description>include/wrenbind17/foreign.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::ForeignKlassImpl   class wrenbind17::ForeignPropImpl   class wrenbind17::ForeignMethodImpl   class wrenbind17::ForeignKlass   class wrenbind17::ForeignProp   class wrenbind17::ForeignMethod    Source code #pragma once  #include &amp;lt;ostream&amp;gt;#include &amp;lt;unordered_map&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;#34;allocator.hpp&amp;#34;#include &amp;#34;caller.hpp&amp;#34; namespace wrenbind17 { enum ForeignMethodOperator { OPERATOR_GET_INDEX, OPERATOR_SET_INDEX, OPERATOR_SUB, OPERATOR_ADD, OPERATOR_MUL, OPERATOR_DIV, OPERATOR_NEG, OPERATOR_MOD, OPERATOR_EQUAL, OPERATOR_NOT_EQUAL, OPERATOR_GT, OPERATOR_LT, OPERATOR_GT_EQUAL, OPERATOR_LT_EQUAL, OPERATOR_SHIFT_LEFT, OPERATOR_SHIFT_RIGHT, OPERATOR_AND, OPERATOR_XOR, OPERATOR_OR }; class ForeignMethod { public: ForeignMethod(std::string name, WrenForeignMethodFn method, const bool isStatic) : name(std::move(name)), method(method), isStatic(isStatic) { } virtual ~ForeignMethod() = default; virtual void generate(std::ostream&amp;amp; os) const = 0; const std::string&amp;amp; getName() const { return name; } WrenForeignMethodFn getMethod() const { return method; } bool getStatic() const { return isStatic; } protected: std::string name; WrenForeignMethodFn method; bool isStatic; }; class ForeignProp { public: ForeignProp(std::string name, WrenForeignMethodFn getter, WrenForeignMethodFn setter, const bool isStatic) : name(std::move(name)), getter(getter), setter(setter), isStatic(isStatic) { } virtual ~ForeignProp() = default; void generate(std::ostream&amp;amp; os) const { if (getter) os &amp;lt;&amp;lt; &amp;#34; foreign &amp;#34; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; if (setter) os &amp;lt;&amp;lt; &amp;#34; foreign &amp;#34; &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;#34;=(rhs)\n&amp;#34;; } const std::string&amp;amp; getName() const { return name; } WrenForeignMethodFn getSetter() { return setter; } WrenForeignMethodFn getGetter() { return getter; } bool getStatic() const { return isStatic; } protected: std::string name; WrenForeignMethodFn getter; WrenForeignMethodFn setter; bool isStatic; }; class ForeignKlass { public: ForeignKlass(std::string name) : name(std::move(name)) { } virtual ~ForeignKlass() = default; virtual void generate(std::ostream&amp;amp; os) const = 0; ForeignMethod&amp;amp; findFunc(const std::string&amp;amp; name, const bool isStatic) { const auto it = methods.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/handle.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/handle_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/handle_8hpp/</guid>
      <description>include/wrenbind17/handle.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::Handle    Source code #pragma once  #include &amp;lt;wren.hpp&amp;gt;#include &amp;lt;memory&amp;gt; namespace wrenbind17 { class Callback; class Handle { public: Handle() : vm(nullptr), handle(nullptr) { } Handle(WrenVM* vm, WrenHandle* handle) : vm(vm), handle(handle) { } ~Handle() { reset(); } Handle(const Handle&amp;amp; other) = delete; Handle(Handle&amp;amp;&amp;amp; other) noexcept : vm(nullptr), handle(nullptr) { swap(other); } Handle&amp;amp; operator=(const Handle&amp;amp; other) = delete; Handle&amp;amp; operator=(Handle&amp;amp;&amp;amp; other) noexcept { if (this !</description>
    </item>
    
    <item>
      <title>include/wrenbind17/index.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/index_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/index_8hpp/</guid>
      <description>include/wrenbind17/index.hpp File Reference
Namespaces    Name     wrenbind17    Source code #pragma once  namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { template &amp;lt;size_t... Is&amp;gt; struct index_list {}; // Declare primary template for index range builder  template &amp;lt;size_t MIN, size_t N, size_t... Is&amp;gt; struct range_builder; // Base step  template &amp;lt;size_t MIN, size_t... Is&amp;gt; struct range_builder&amp;lt;MIN, MIN, Is...&amp;gt; { typedef index_list&amp;lt;Is.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/method.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/method_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/method_8hpp/</guid>
      <description>include/wrenbind17/method.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::Method    Source code #pragma once  #include &amp;#34;any.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { inline void pushArgs(WrenVM* vm, int idx) { (void)vm; (void)idx; } template &amp;lt;typename First, typename... Other&amp;gt; inline void pushArgs( WrenVM* vm, int idx, First&amp;amp;&amp;amp; first, Other&amp;amp;&amp;amp;.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/module.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/module_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/module_8hpp/</guid>
      <description>include/wrenbind17/module.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::ForeignModule    Source code #pragma once  #include &amp;lt;sstream&amp;gt;#include &amp;#34;foreign.hpp&amp;#34; namespace wrenbind17 { void addClassType(WrenVM* vm, const std::string&amp;amp; module, const std::string&amp;amp; name, size_t hash); void addClassCast(WrenVM* vm, std::shared_ptr&amp;lt;detail::ForeignPtrConvertor&amp;gt; convertor, size_t hash, size_t other); class ForeignModule { public: ForeignModule(std::string name, WrenVM* vm) : name(std::move(name)), vm(vm) { } ForeignModule(const ForeignModule&amp;amp; other) = delete; ForeignModule(ForeignModule&amp;amp;&amp;amp; other) noexcept : vm(nullptr) { swap(other); } ~ForeignModule() = default; ForeignModule&amp;amp; operator=(const ForeignModule&amp;amp; other) = delete; ForeignModule&amp;amp; operator=(ForeignModule&amp;amp;&amp;amp; other) noexcept { if (this !</description>
    </item>
    
    <item>
      <title>include/wrenbind17/object.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/object_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/object_8hpp/</guid>
      <description>include/wrenbind17/object.hpp File Reference
Namespaces    Name     wrenbind17    Source code #pragma once  #include &amp;#34;exception.hpp&amp;#34;#include &amp;#34;handle.hpp&amp;#34;#include &amp;lt;cstdlib&amp;gt;#include &amp;lt;memory&amp;gt;#include &amp;lt;string&amp;gt;#include &amp;lt;typeinfo&amp;gt;#include &amp;lt;variant&amp;gt;#include &amp;lt;wren.hpp&amp;gt; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  std::string getLastError(WrenVM* vm); inline void exceptionHandler(WrenVM* vm, const std::exception_ptr&amp;amp; eptr) { try { if (eptr) { std::rethrow_exception(eptr); } else { wrenEnsureSlots(vm, 1); wrenSetSlotString(vm, 0, &amp;#34;Unknown error&amp;#34;); wrenAbortFiber(vm, 0); } } catch (std::exception&amp;amp; e) { wrenEnsureSlots(vm, 1); wrenSetSlotString(vm, 0, e.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/pop.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/pop_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/pop_8hpp/</guid>
      <description>include/wrenbind17/pop.hpp File Reference
Namespaces    Name     wrenbind17    Source code #pragma once  #include &amp;#34;object.hpp&amp;#34; namespace wrenbind17 { void getClassType(WrenVM* vm, std::string&amp;amp; module, std::string&amp;amp; name, size_t hash); detail::ForeignPtrConvertor* getClassCast(WrenVM* vm, size_t hash, size_t other); #ifndef DOXYGEN_SHOULD_SKIP_THIS  namespace detail { // ============================================================================================================  // CHECK SLOTS FOR TYPE  // ============================================================================================================  inline const char* wrenSlotTypeToStr(const WrenType type) { switch (type) { case WREN_TYPE_BOOL: return &amp;#34;bool&amp;#34;; case WREN_TYPE_FOREIGN: return &amp;#34;instance&amp;#34;; case WREN_TYPE_LIST: return &amp;#34;list&amp;#34;; case WREN_TYPE_NULL: return &amp;#34;null&amp;#34;; case WREN_TYPE_NUM: return &amp;#34;number&amp;#34;; case WREN_TYPE_STRING: return &amp;#34;string&amp;#34;; case WREN_TYPE_UNKNOWN: default: return &amp;#34;unknown&amp;#34;; } } template &amp;lt;typename T&amp;gt; inline bool is(WrenVM* vm, const int idx) { const auto type = wrenGetSlotType(vm, idx); if (type !</description>
    </item>
    
    <item>
      <title>include/wrenbind17/push.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/push_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/push_8hpp/</guid>
      <description>include/wrenbind17/push.hpp File Reference
Namespaces    Name     wrenbind17    Source code #pragma once  #include &amp;#34;object.hpp&amp;#34; namespace wrenbind17 { #ifndef DOXYGEN_SHOULD_SKIP_THIS  void getClassType(WrenVM* vm, std::string&amp;amp; module, std::string&amp;amp; name, size_t hash); detail::ForeignPtrConvertor* getClassCast(WrenVM* vm, size_t hash, size_t other); namespace detail { template &amp;lt;typename T&amp;gt; struct PushHelper; template &amp;lt;typename T&amp;gt; struct PushHelper { static inline void f(WrenVM* vm, int idx, const T&amp;amp; value) { static_assert(!</description>
    </item>
    
    <item>
      <title>include/wrenbind17/std.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/std_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/std_8hpp/</guid>
      <description>include/wrenbind17/std.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::StdListBindings   class wrenbind17::StdVectorBindings    Source code #pragma once  #include &amp;lt;vector&amp;gt;#include &amp;lt;list&amp;gt;#include &amp;#34;module.hpp&amp;#34; namespace wrenbind17 { template&amp;lt;typename T&amp;gt; class StdVectorBindings { public: typedef typename std::vector&amp;lt;T&amp;gt;::iterator Iterator; typedef typename std::vector&amp;lt;T&amp;gt; Vector; static void setIndex(Vector&amp;amp; self, size_t index, T value) { self[index] = std::move(value); } static const T&amp;amp; getIndex(Vector&amp;amp; self, size_t index) { return self[index]; } static void add(Vector&amp;amp; self, T value) { self.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/variable.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/variable_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/variable_8hpp/</guid>
      <description>include/wrenbind17/variable.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::Variable    Source code #pragma once  #include &amp;#34;method.hpp&amp;#34;#include &amp;#34;push.hpp&amp;#34;#include &amp;#34;pop.hpp&amp;#34; namespace wrenbind17 { class Variable { public: Variable() : vm(nullptr) { } Variable(WrenVM* vm, const std::shared_ptr&amp;lt;Handle&amp;gt;&amp;amp; handle) : vm(vm), handle(handle) { } ~Variable() { reset(); } Method func(const std::string&amp;amp; signature) { auto* h = wrenMakeCallHandle(vm, signature.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/vm.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/vm_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/vm_8hpp/</guid>
      <description>include/wrenbind17/vm.hpp File Reference
Namespaces    Name     wrenbind17    Classes     Name     class wrenbind17::VM    Source code #pragma once  #include &amp;#34;module.hpp&amp;#34;#include &amp;#34;std.hpp&amp;#34;#include &amp;#34;variable.hpp&amp;#34;#include &amp;lt;cstdlib&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;fstream&amp;gt;#include &amp;lt;functional&amp;gt;#include &amp;lt;unordered_map&amp;gt;#include &amp;lt;vector&amp;gt; #ifndef DOXYGEN_SHOULD_SKIP_THIS namespace std { template &amp;lt;&amp;gt; struct hash&amp;lt;std::pair&amp;lt;size_t, size_t&amp;gt;&amp;gt; { inline size_t operator()(const std::pair&amp;lt;size_t, size_t&amp;gt;&amp;amp; v) const { const std::hash&amp;lt;size_t&amp;gt; hasher; return hasher(v.</description>
    </item>
    
    <item>
      <title>include/wrenbind17/wrenbind17.hpp</title>
      <link>https://matusnovak.github.io/wrenbind17/files/wrenbind17_8hpp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/files/wrenbind17_8hpp/</guid>
      <description>include/wrenbind17/wrenbind17.hpp File Reference
Source code #pragma once  #include &amp;#34;vm.hpp&amp;#34; Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>Wrenbind17</title>
      <link>https://matusnovak.github.io/wrenbind17/modules/group__wrenbind17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/modules/group__wrenbind17/</guid>
      <description>Wren lang binding library for C++17.</description>
    </item>
    
    <item>
      <title>wrenbind17</title>
      <link>https://matusnovak.github.io/wrenbind17/namespaces/namespacewrenbind17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/namespaces/namespacewrenbind17/</guid>
      <description>wrenbind17 Namespace Reference
Module: Wrenbind17
Classes     Name     class wrenbind17::VM   class wrenbind17::Variable   class wrenbind17::StdVectorBindings   class wrenbind17::StdListBindings   class wrenbind17::RuntimeError   class wrenbind17::NotFound   class wrenbind17::Method   class wrenbind17::Handle   class wrenbind17::ForeignPropImpl   class wrenbind17::ForeignProp   class wrenbind17::ForeignModule   class wrenbind17::ForeignMethodImpl   class wrenbind17::ForeignMethod   class wrenbind17::ForeignKlassImpl   class wrenbind17::ForeignKlass   class wrenbind17::Exception   class wrenbind17::CompileError   class wrenbind17::BadCast   class wrenbind17::Any    Types     Name     typedef std::function&amp;lt; std::string(const std::vector&amp;lt; std::string &amp;gt; &amp;amp;paths, const std::string &amp;amp;name)&amp;gt; LoadFileFn   typedef std::function&amp;lt; void(const char *)&amp;gt; PrintFn   enum ForeignMethodOperator { OPERATOR_GET_INDEX, OPERATOR_SET_INDEX, OPERATOR_SUB, OPERATOR_ADD, OPERATOR_MUL, OPERATOR_DIV, OPERATOR_NEG, OPERATOR_MOD, OPERATOR_EQUAL, OPERATOR_NOT_EQUAL, OPERATOR_GT, OPERATOR_LT, OPERATOR_GT_EQUAL, OPERATOR_LT_EQUAL, OPERATOR_SHIFT_LEFT, OPERATOR_SHIFT_RIGHT, OPERATOR_AND, OPERATOR_XOR, OPERATOR_OR }    Functions     Name     std::string getLastError(WrenVM * vm)   detail::ForeignPtrConvertor * getClassCast(WrenVM * vm, size_t hash, size_t other)   void getClassType(WrenVM * vm, std::string &amp;amp; module, std::string &amp;amp; name, size_t hash)   void addClassCast(WrenVM * vm, std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; convertor, size_t hash, size_t other)   void addClassType(WrenVM * vm, const std::string &amp;amp; module, const std::string &amp;amp; name, size_t hash)   std::string Any::as&amp;lt; std::string &amp;gt;() const   std::nullptr_t Any::as&amp;lt; std::nullptr_t &amp;gt;() const   bool Any::is&amp;lt; std::string &amp;gt;() const   bool Any::is&amp;lt; std::nullptr_t &amp;gt;() const   void setNextError(WrenVM * vm, std::string str)    Types Documentation typedef LoadFileFn typedef std::function&amp;lt; std::string(const std::vector&amp;lt; std::string &amp;gt; &amp;amp;paths, const std::string &amp;amp;name)&amp;gt; LoadFileFn;  typedef PrintFn typedef std::function&amp;lt; void(const char *)&amp;gt; PrintFn;  enum ForeignMethodOperator enum ForeignMethodOperator { OPERATOR_GET_INDEX, OPERATOR_SET_INDEX, OPERATOR_SUB, OPERATOR_ADD, OPERATOR_MUL, OPERATOR_DIV, OPERATOR_NEG, OPERATOR_MOD, OPERATOR_EQUAL, OPERATOR_NOT_EQUAL, OPERATOR_GT, OPERATOR_LT, OPERATOR_GT_EQUAL, OPERATOR_LT_EQUAL, OPERATOR_SHIFT_LEFT, OPERATOR_SHIFT_RIGHT, OPERATOR_AND, OPERATOR_XOR, OPERATOR_OR }  Functions Documentation function getLastError inline std::string getLastError( WrenVM * vm )  function getClassCast inline detail::ForeignPtrConvertor * getClassCast( WrenVM * vm, size_t hash, size_t other )  function getClassType inline void getClassType( WrenVM * vm, std::string &amp;amp; module, std::string &amp;amp; name, size_t hash )  function addClassCast inline void addClassCast( WrenVM * vm, std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; convertor, size_t hash, size_t other )  function addClassType inline void addClassType( WrenVM * vm, const std::string &amp;amp; module, const std::string &amp;amp; name, size_t hash )  function Any::as&amp;lt; std::string &amp;gt; inline std::string Any::as&amp;lt; std::string &amp;gt;() const  function Any::as&amp;lt; std::nullptr_t &amp;gt; inline std::nullptr_t Any::as&amp;lt; std::nullptr_t &amp;gt;() const  function Any::is&amp;lt; std::string &amp;gt; inline bool Any::is&amp;lt; std::string &amp;gt;() const  function Any::is&amp;lt; std::nullptr_t &amp;gt; inline bool Any::is&amp;lt; std::nullptr_t &amp;gt;() const  function setNextError inline void setNextError( WrenVM * vm, std::string str )  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Any</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_any/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_any/</guid>
      <description>wrenbind17::Any Class Reference
Module: Wrenbind17
#include &amp;lt;any.hpp&amp;gt;
Public Classes     Name     class Data   class Content    Public Functions     Name     bool as() const   double as() const   float as() const   unsigned long long as() const   unsigned long as() const   unsigned int as() const   unsigned short as() const   unsigned char as() const   long long as() const   long as() const   int as() const   short as() const   char as() const   int8_t as() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool is() const   bool empty() const   bool is() const   std::shared_ptr&amp;lt; T &amp;gt; shared() const   std::enable_if&amp;lt; detail::is_shared_ptr&amp;lt; T &amp;gt;::value, T &amp;gt;::type as() const   std::enable_if&amp;lt; std::is_pointer&amp;lt; T &amp;gt;::value, T &amp;gt;::type as() const   std::enable_if&amp;lt;!</description>
    </item>
    
    <item>
      <title>wrenbind17::Any::Content</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_any_1_1_content/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_any_1_1_content/</guid>
      <description>wrenbind17::Any::Content Class Reference
#include &amp;lt;any.hpp&amp;gt;
Inherited by wrenbind17::Any::Data&amp;lt; T &amp;gt;
Public Functions     Name     virtual const std::type_info &amp;amp; getTypeid() const =0   virtual ~Content()    Public Functions Documentation function getTypeid virtual const std::type_info &amp;amp; getTypeid() const =0  Reimplemented by: wrenbind17::Any::Data::getTypeid
function ~Content inline virtual ~Content()  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Any::Data</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_any_1_1_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_any_1_1_data/</guid>
      <description>wrenbind17::Any::Data Class Reference
More&amp;hellip;
#include &amp;lt;any.hpp&amp;gt;
Inherits from wrenbind17::Any::Content
Public Functions     Name     const T &amp;amp; get() const   T &amp;amp; get()   virtual const std::type_info &amp;amp; getTypeid() const override   virtual ~Data() =default    Data(Arg arg)    Additional inherited members Public Functions inherited from wrenbind17::Any::Content
    Name     virtual ~Content()    Detailed Description template &amp;lt;typename T&amp;gt; class wrenbind17::Any::Data;  Public Functions Documentation function get inline const T &amp;amp; get() const  function get inline T &amp;amp; get()  function getTypeid inline virtual const std::type_info &amp;amp; getTypeid() const override  Reimplements: wrenbind17::Any::Content::getTypeid</description>
    </item>
    
    <item>
      <title>wrenbind17::BadCast</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_bad_cast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_bad_cast/</guid>
      <description>wrenbind17::BadCast Class Reference
Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, exception
Public Functions     Name      BadCast(std::string msg)    BadCast()    Additional inherited members Public Functions inherited from wrenbind17::Exception
    Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation function BadCast inline explicit BadCast( std::string msg )  function BadCast inline BadCast()  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::CompileError</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_compile_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_compile_error/</guid>
      <description>wrenbind17::CompileError Class Reference
Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, exception
Public Functions     Name      CompileError(std::string msg)    Additional inherited members Public Functions inherited from wrenbind17::Exception
    Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation function CompileError inline explicit CompileError( std::string msg )  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Exception</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_exception/</guid>
      <description>wrenbind17::Exception Class Reference
Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from exception
Inherited by wrenbind17::BadCast, wrenbind17::CompileError, wrenbind17::NotFound, wrenbind17::RuntimeError
Public Functions     Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation function what inline const char * what() const override  function Exception inline explicit Exception( std::string msg )  function Exception Exception() =default  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignKlass</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass/</guid>
      <description>wrenbind17::ForeignKlass Class Reference
Module: Wrenbind17
#include &amp;lt;foreign.hpp&amp;gt;
Inherited by wrenbind17::ForeignKlassImpl&amp;lt; T &amp;gt;
Public Functions     Name     WrenForeignClassMethods &amp;amp; getAllocators()   const std::string &amp;amp; getName() const   WrenForeignMethodFn findSignature(const std::string &amp;amp; signature, const bool isStatic)   ForeignProp &amp;amp; findProp(const std::string &amp;amp; name, const bool isStatic)   ForeignMethod &amp;amp; findFunc(const std::string &amp;amp; name, const bool isStatic)   virtual void generate(std::ostream &amp;amp; os) const =0   virtual ~ForeignKlass() =default    ForeignKlass(std::string name)    Protected Attributes     Name     WrenForeignClassMethods allocators   std::unordered_map&amp;lt; std::string, std::unique_ptr&amp;lt; ForeignProp &amp;gt; &amp;gt; props   std::unordered_map&amp;lt; std::string, std::unique_ptr&amp;lt; ForeignMethod &amp;gt; &amp;gt; methods   std::string ctorDef   std::string name    Public Functions Documentation function getAllocators inline WrenForeignClassMethods &amp;amp; getAllocators()  function getName inline const std::string &amp;amp; getName() const  function findSignature inline WrenForeignMethodFn findSignature( const std::string &amp;amp; signature, const bool isStatic )  function findProp inline ForeignProp &amp;amp; findProp( const std::string &amp;amp; name, const bool isStatic )  function findFunc inline ForeignMethod &amp;amp; findFunc( const std::string &amp;amp; name, const bool isStatic )  function generate virtual void generate( std::ostream &amp;amp; os ) const =0  Reimplemented by: wrenbind17::ForeignKlassImpl::generate</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignKlassImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass_impl/</guid>
      <description>wrenbind17::ForeignKlassImpl Class Reference
Module: Wrenbind17
More&amp;hellip;
#include &amp;lt;foreign.hpp&amp;gt;
Inherits from wrenbind17::ForeignKlass
Public Functions     Name     void propReadonlyExt(std::string name)   void propExt(std::string name)   void propReadonly(std::string name)   void prop(std::string name)   void varReadonly(std::string name)   void var(std::string name)   void funcStaticExt(std::string name)   void funcStatic(std::string name)   void funcExt(const ForeignMethodOperator name)   void funcExt(std::string name)   void func(const ForeignMethodOperator name)   void func(std::string name)   void ctor(const std::string &amp;amp; name =&amp;ldquo;new&amp;rdquo;)   virtual void generate(std::ostream &amp;amp; os) const override    ~ForeignKlassImpl() =default    ForeignKlassImpl(std::string name)    Additional inherited members Public Functions inherited from wrenbind17::ForeignKlass</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignMethod</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method/</guid>
      <description>wrenbind17::ForeignMethod Class Reference
Module: Wrenbind17
#include &amp;lt;foreign.hpp&amp;gt;
Inherited by wrenbind17::ForeignMethodImpl&amp;lt; Args &amp;gt;
Public Functions     Name     bool getStatic() const   WrenForeignMethodFn getMethod() const   const std::string &amp;amp; getName() const   virtual void generate(std::ostream &amp;amp; os) const =0   virtual ~ForeignMethod() =default    ForeignMethod(std::string name, WrenForeignMethodFn method, const bool isStatic)    Protected Attributes     Name     bool isStatic   WrenForeignMethodFn method   std::string name    Public Functions Documentation function getStatic inline bool getStatic() const  function getMethod inline WrenForeignMethodFn getMethod() const  function getName inline const std::string &amp;amp; getName() const  function generate virtual void generate( std::ostream &amp;amp; os ) const =0  Reimplemented by: wrenbind17::ForeignMethodImpl::generate</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignMethodImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method_impl/</guid>
      <description>wrenbind17::ForeignMethodImpl Class Reference
Module: Wrenbind17
More&amp;hellip;
#include &amp;lt;foreign.hpp&amp;gt;
Inherits from wrenbind17::ForeignMethod
Public Functions     Name     std::string generateName(const ForeignMethodOperator name)   std::string generateSignature(const ForeignMethodOperator name)   std::string generateSignature(const std::string &amp;amp; name)   virtual void generate(std::ostream &amp;amp; os) const override    ~ForeignMethodImpl() =default    ForeignMethodImpl(std::string name, std::string signature, WrenForeignMethodFn fn, const bool isStatic)    Additional inherited members Public Functions inherited from wrenbind17::ForeignMethod</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignModule</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_module/</guid>
      <description>wrenbind17::ForeignModule Class Reference
Module: Wrenbind17
#include &amp;lt;module.hpp&amp;gt;
Public Functions     Name     const std::string &amp;amp; getName() const   ForeignKlass &amp;amp; findKlass(const std::string &amp;amp; name)   void append(std::string text)   std::string str() const   ForeignKlassImpl&amp;lt; T &amp;gt; &amp;amp; klass(std::string name)   void swap(ForeignModule &amp;amp; other)   ForeignModule &amp;amp; operator=(ForeignModule &amp;amp;&amp;amp; other)   ForeignModule &amp;amp; operator=(const ForeignModule &amp;amp; other)    ~ForeignModule() =default    ForeignModule(ForeignModule &amp;amp;&amp;amp; other)    ForeignModule(const ForeignModule &amp;amp; other)    ForeignModule(std::string name, WrenVM * vm)    Public Functions Documentation function getName inline const std::string &amp;amp; getName() const  function findKlass inline ForeignKlass &amp;amp; findKlass( const std::string &amp;amp; name )  function append inline void append( std::string text )  function str inline std::string str() const  function klass inline ForeignKlassImpl&amp;lt; T &amp;gt; &amp;amp; klass( std::string name )  function swap inline void swap( ForeignModule &amp;amp; other )  function operator= inline ForeignModule &amp;amp; operator=( ForeignModule &amp;amp;&amp;amp; other )  function operator= ForeignModule &amp;amp; operator=( const ForeignModule &amp;amp; other )  function ~ForeignModule ~ForeignModule() =default  function ForeignModule inline ForeignModule( ForeignModule &amp;amp;&amp;amp; other )  function ForeignModule ForeignModule( const ForeignModule &amp;amp; other )  function ForeignModule inline ForeignModule( std::string name, WrenVM * vm )  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignProp</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop/</guid>
      <description>wrenbind17::ForeignProp Class Reference
Module: Wrenbind17
#include &amp;lt;foreign.hpp&amp;gt;
Inherited by wrenbind17::ForeignPropImpl&amp;lt; T, V &amp;gt;
Public Functions     Name     bool getStatic() const   WrenForeignMethodFn getGetter()   WrenForeignMethodFn getSetter()   const std::string &amp;amp; getName() const   void generate(std::ostream &amp;amp; os) const   virtual ~ForeignProp() =default    ForeignProp(std::string name, WrenForeignMethodFn getter, WrenForeignMethodFn setter, const bool isStatic)    Protected Attributes     Name     bool isStatic   WrenForeignMethodFn setter   WrenForeignMethodFn getter   std::string name    Public Functions Documentation function getStatic inline bool getStatic() const  function getGetter inline WrenForeignMethodFn getGetter()  function getSetter inline WrenForeignMethodFn getSetter()  function getName inline const std::string &amp;amp; getName() const  function generate inline void generate( std::ostream &amp;amp; os ) const  function ~ForeignProp virtual ~ForeignProp() =default  function ForeignProp inline ForeignProp( std::string name, WrenForeignMethodFn getter, WrenForeignMethodFn setter, const bool isStatic )  Protected Attributes Documentation variable isStatic bool isStatic;  variable setter WrenForeignMethodFn setter;  variable getter WrenForeignMethodFn getter;  variable name std::string name;  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignPropImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop_impl/</guid>
      <description>wrenbind17::ForeignPropImpl Class Reference
Module: Wrenbind17
More&amp;hellip;
#include &amp;lt;foreign.hpp&amp;gt;
Inherits from wrenbind17::ForeignProp
Public Functions     Name      ~ForeignPropImpl() =default    ForeignPropImpl(std::string name, WrenForeignMethodFn getter, WrenForeignMethodFn setter, const bool isStatic)    Additional inherited members Public Functions inherited from wrenbind17::ForeignProp
    Name     bool getStatic() const   WrenForeignMethodFn getGetter()   WrenForeignMethodFn getSetter()   const std::string &amp;amp; getName() const   void generate(std::ostream &amp;amp; os) const   virtual ~ForeignProp() =default    ForeignProp(std::string name, WrenForeignMethodFn getter, WrenForeignMethodFn setter, const bool isStatic)    Protected Attributes inherited from wrenbind17::ForeignProp</description>
    </item>
    
    <item>
      <title>wrenbind17::Handle</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_handle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_handle/</guid>
      <description>wrenbind17::Handle Class Reference
Module: Wrenbind17
#include &amp;lt;handle.hpp&amp;gt;
Public Functions     Name      operator bool() const   void reset()   WrenVM * getVm() const   WrenHandle * getHandle() const   void swap(Handle &amp;amp; other)   Handle &amp;amp; operator=(Handle &amp;amp;&amp;amp; other)   Handle &amp;amp; operator=(const Handle &amp;amp; other)    Handle(Handle &amp;amp;&amp;amp; other)    Handle(const Handle &amp;amp; other)    ~Handle()    Handle(WrenVM * vm, WrenHandle * handle)    Handle()    Public Attributes     Name     friend Callback    Public Functions Documentation function operator bool inline operator bool() const  function reset inline void reset()  function getVm inline WrenVM * getVm() const  function getHandle inline WrenHandle * getHandle() const  function swap inline void swap( Handle &amp;amp; other )  function operator= inline Handle &amp;amp; operator=( Handle &amp;amp;&amp;amp; other )  function operator= Handle &amp;amp; operator=( const Handle &amp;amp; other )  function Handle inline Handle( Handle &amp;amp;&amp;amp; other )  function Handle Handle( const Handle &amp;amp; other )  function ~Handle inline ~Handle()  function Handle inline Handle( WrenVM * vm, WrenHandle * handle )  function Handle inline Handle()  Public Attributes Documentation variable Callback friend Callback;  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Method</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_method/</guid>
      <description>wrenbind17::Method Class Reference
Module: Wrenbind17
#include &amp;lt;method.hpp&amp;gt;
Public Functions     Name     void reset()    operator bool() const   Any operator()(Args &amp;amp;&amp;amp;&amp;hellip; args)    ~Method()    Method(WrenVM * vm, std::shared_ptr&amp;lt; Handle &amp;gt; variable, std::shared_ptr&amp;lt; Handle &amp;gt; handle)    Method()    Public Functions Documentation function reset inline void reset()  function operator bool inline operator bool() const  function operator() inline Any operator()( Args &amp;amp;&amp;amp;.</description>
    </item>
    
    <item>
      <title>wrenbind17::NotFound</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_not_found/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_not_found/</guid>
      <description>wrenbind17::NotFound Class Reference
Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, exception
Public Functions     Name      NotFound()    Additional inherited members Public Functions inherited from wrenbind17::Exception
    Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation function NotFound inline NotFound()  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::RuntimeError</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_runtime_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_runtime_error/</guid>
      <description>wrenbind17::RuntimeError Class Reference
Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, exception
Public Functions     Name      RuntimeError(std::string msg)    Additional inherited members Public Functions inherited from wrenbind17::Exception
    Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation function RuntimeError inline explicit RuntimeError( std::string msg )  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::StdListBindings</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_list_bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_list_bindings/</guid>
      <description>wrenbind17::StdListBindings Class Reference
More&amp;hellip;
#include &amp;lt;std.hpp&amp;gt;
Public Types     Name     typedef std::list&amp;lt; T &amp;gt; List   typedef std::list&amp;lt; T &amp;gt;::iterator Iterator    Public Functions     Name     void bind(ForeignModule &amp;amp; m, const std::string &amp;amp; name)   size_t size(List &amp;amp; self)   void clear(List &amp;amp; self)   T pop(List &amp;amp; self)   bool contains(List &amp;amp; self, const T &amp;amp; value)   void insert(List &amp;amp; self, long index, T value)   T removeAt(List &amp;amp; self, long index)   size_t count(List &amp;amp; self)   const T &amp;amp; iteratorValue(List &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other)   std::variant&amp;lt; bool, Iterator &amp;gt; iterate(List &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other)   void add(List &amp;amp; self, T value)   const T &amp;amp; getIndex(List &amp;amp; self, size_t index)   void setIndex(List &amp;amp; self, size_t index, T value)    Detailed Description template &amp;lt;typename T &amp;gt; class wrenbind17::StdListBindings;  Public Types Documentation typedef List typedef std::list&amp;lt; T &amp;gt; List;  typedef Iterator typedef std::list&amp;lt; T &amp;gt;::iterator Iterator;  Public Functions Documentation function bind static inline void bind( ForeignModule &amp;amp; m, const std::string &amp;amp; name )  function size static inline size_t size( List &amp;amp; self )  function clear static inline void clear( List &amp;amp; self )  function pop static inline T pop( List &amp;amp; self )  function contains static inline bool contains( List &amp;amp; self, const T &amp;amp; value )  function insert static inline void insert( List &amp;amp; self, long index, T value )  function removeAt static inline T removeAt( List &amp;amp; self, long index )  function count static inline size_t count( List &amp;amp; self )  function iteratorValue static inline const T &amp;amp; iteratorValue( List &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other )  function iterate static inline std::variant&amp;lt; bool, Iterator &amp;gt; iterate( List &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other )  function add static inline void add( List &amp;amp; self, T value )  function getIndex static inline const T &amp;amp; getIndex( List &amp;amp; self, size_t index )  function setIndex static inline void setIndex( List &amp;amp; self, size_t index, T value )  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::StdVectorBindings</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_vector_bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_vector_bindings/</guid>
      <description>wrenbind17::StdVectorBindings Class Reference
More&amp;hellip;
#include &amp;lt;std.hpp&amp;gt;
Public Types     Name     typedef std::vector&amp;lt; T &amp;gt; Vector   typedef std::vector&amp;lt; T &amp;gt;::iterator Iterator    Public Functions     Name     void bind(ForeignModule &amp;amp; m, const std::string &amp;amp; name)   size_t size(Vector &amp;amp; self)   void clear(Vector &amp;amp; self)   T pop(Vector &amp;amp; self)   bool contains(Vector &amp;amp; self, const T &amp;amp; value)   void insert(Vector &amp;amp; self, long index, T value)   T removeAt(Vector &amp;amp; self, long index)   size_t count(Vector &amp;amp; self)   const T &amp;amp; iteratorValue(Vector &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other)   std::variant&amp;lt; bool, Iterator &amp;gt; iterate(Vector &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other)   void add(Vector &amp;amp; self, T value)   const T &amp;amp; getIndex(Vector &amp;amp; self, size_t index)   void setIndex(Vector &amp;amp; self, size_t index, T value)    Detailed Description template &amp;lt;typename T &amp;gt; class wrenbind17::StdVectorBindings;  Public Types Documentation typedef Vector typedef std::vector&amp;lt; T &amp;gt; Vector;  typedef Iterator typedef std::vector&amp;lt; T &amp;gt;::iterator Iterator;  Public Functions Documentation function bind static inline void bind( ForeignModule &amp;amp; m, const std::string &amp;amp; name )  function size static inline size_t size( Vector &amp;amp; self )  function clear static inline void clear( Vector &amp;amp; self )  function pop static inline T pop( Vector &amp;amp; self )  function contains static inline bool contains( Vector &amp;amp; self, const T &amp;amp; value )  function insert static inline void insert( Vector &amp;amp; self, long index, T value )  function removeAt static inline T removeAt( Vector &amp;amp; self, long index )  function count static inline size_t count( Vector &amp;amp; self )  function iteratorValue static inline const T &amp;amp; iteratorValue( Vector &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other )  function iterate static inline std::variant&amp;lt; bool, Iterator &amp;gt; iterate( Vector &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other )  function add static inline void add( Vector &amp;amp; self, T value )  function getIndex static inline const T &amp;amp; getIndex( Vector &amp;amp; self, size_t index )  function setIndex static inline void setIndex( Vector &amp;amp; self, size_t index, T value )  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Variable</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_variable/</guid>
      <description>wrenbind17::Variable Class Reference
Module: Wrenbind17
#include &amp;lt;variable.hpp&amp;gt;
Public Functions     Name     void reset()    operator bool() const   WrenHandle * getHandle() const   Method func(const std::string &amp;amp; signature)    ~Variable()    Variable(WrenVM * vm, const std::shared_ptr&amp;lt; Handle &amp;gt; &amp;amp; handle)    Variable()    Public Functions Documentation function reset inline void reset()  function operator bool inline operator bool() const  function getHandle inline WrenHandle * getHandle() const  function func inline Method func( const std::string &amp;amp; signature )  function ~Variable inline ~Variable()  function Variable inline Variable( WrenVM * vm, const std::shared_ptr&amp;lt; Handle &amp;gt; &amp;amp; handle )  function Variable inline Variable()  Updated on 9 December 2019 at 19:28:41 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::VM</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m/</guid>
      <description>wrenbind17::VM Class Reference
Module: Wrenbind17
#include &amp;lt;vm.hpp&amp;gt;
Public Functions     Name     void gc()   WrenVM * getVm() const   void setLoadFileFunc(const LoadFileFn &amp;amp; fn)   void setPrintFunc(const PrintFn &amp;amp; fn)   void setNextError(std::string str)   std::string getLastError()   detail::ForeignPtrConvertor * getClassCast(const size_t hash, const size_t other)   void addClassCast(std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; convertor, const size_t hash, const size_t other)   void getClassType(std::string &amp;amp; module, std::string &amp;amp; name, const size_t hash)   void addClassType(const std::string &amp;amp; module, const std::string &amp;amp; name, const size_t hash)   ForeignModule &amp;amp; module(const std::string &amp;amp; name)   Variable find(const std::string &amp;amp; module, const std::string &amp;amp; name)   void runFromModule(const std::string &amp;amp; name)   void runFromFile(const std::string &amp;amp; name, const std::string &amp;amp; path)   void runFromSource(const std::string &amp;amp; name, const std::string &amp;amp; code)   void swap(VM &amp;amp; other)   VM &amp;amp; operator=(VM &amp;amp;&amp;amp; other)   VM &amp;amp; operator=(const VM &amp;amp; other)    ~VM()    VM(VM &amp;amp;&amp;amp; other)    VM(const VM &amp;amp; other)    VM(std::vector&amp;lt; std::string &amp;gt; paths ={&amp;ldquo;.</description>
    </item>
    
  </channel>
</rss>