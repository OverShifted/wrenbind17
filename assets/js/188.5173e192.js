(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{387:function(e,a,r){"use strict";r.r(a);var n=r(0),t=Object(n.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"tutorial-pass-and-return-c-variables-policy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tutorial-pass-and-return-c-variables-policy","aria-hidden":"true"}},[e._v("#")]),e._v(" Tutorial: Pass and return C++ variables policy")]),e._v(" "),r("p",[e._v("WrenBind17 supports passing C++ variables into Wren (either by calling a Wren function or calling C++ function from Wren) by a copy, pointer, shared pointer, or a reference.")]),e._v(" "),r("h2",{attrs:{id:"passing-c-variables-to-wren"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#passing-c-variables-to-wren","aria-hidden":"true"}},[e._v("#")]),e._v(" Passing C++ variables to Wren")]),e._v(" "),r("p",[e._v("This applies when calling a Wren function. For example, you want to pass some custom class into a Wren function.")]),e._v(" "),r("ul",[r("li",[e._v("Pass by a copy - When passing by a copy the Wren will create a copy of the class instance.")]),e._v(" "),r("li",[e._v("pass by a pointer - The Wren will only keep the pointer, no copies are created.")]),e._v(" "),r("li",[e._v("Pass by a move - The move will be handled and no copies will be created.")]),e._v(" "),r("li",[e._v("Pass by a reference - Same as a copy.")]),e._v(" "),r("li",[e._v("Pass by a constant reference - Same as a copy.")]),e._v(" "),r("li",[e._v("Pass by a shared pointer - C++ and Wren will share the same smart pointer, no copies are created.")])]),e._v(" "),r("h2",{attrs:{id:"returning-c-variables-to-wren"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#returning-c-variables-to-wren","aria-hidden":"true"}},[e._v("#")]),e._v(" Returning C++ variables to Wren")]),e._v(" "),r("p",[e._v("This applies when calling a C++ function (a member function of a class) that returns a custom class. For example, you have a factory or some global resource manager and you want to access some C++ class instances inside of Wren.")]),e._v(" "),r("ul",[r("li",[e._v("Return by a copy - A copy will be created.")]),e._v(" "),r("li",[e._v("Return by a move - The instance will be moved into a shared pointer wrapper used by Wren, no copies will be created.")]),e._v(" "),r("li",[e._v("Return by a pointer - No copy will be created. The pointer will be moved into a shared_ptr without a delete function.")]),e._v(" "),r("li",[e._v("Return by a reference - Same as pointer.")]),e._v(" "),r("li",[e._v("Return by a const reference - Same as pointer.")]),e._v(" "),r("li",[e._v("Return by a shared pointer - C++ and Wren will share the same smart pointer, no copies are created.")])])])}),[],!1,null,null,null);a.default=t.exports}}]);