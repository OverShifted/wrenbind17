<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Classes on WrenBind17</title>
    <link>https://matusnovak.github.io/wrenbind17/classes/</link>
    <description>Recent content in Classes on WrenBind17</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://matusnovak.github.io/wrenbind17/classes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>wrenbind17::AbstractMapBindings</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_abstract_map_bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_abstract_map_bindings/</guid>
      <description>wrenbind17::AbstractMapBindings #  More&amp;hellip;
#include &amp;lt;std.hpp&amp;gt;
Public Types #      Name     typedef Map::value_type Pair   typedef Map::iterator Iterator   typedef Map::mapped_type T   typedef Map::key_type K    Public Functions #      Name     void bind(ForeignModule &amp;amp; m, const std::string &amp;amp; name)   const T &amp;amp; pairValue(Pair &amp;amp; pair)   const K &amp;amp; pairKey(Pair &amp;amp; pair)   Pair iteratorValue(Map &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other)   std::variant&amp;lt; bool, Iterator &amp;gt; iterate(Map &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other)   bool empty(Map &amp;amp; self)   size_t size(Map &amp;amp; self)   void clear(Map &amp;amp; self)   size_t count(Map &amp;amp; self)   bool containsKey(Map &amp;amp; self, const K &amp;amp; key)   std::variant&amp;lt; T, std::nullptr_t &amp;gt; remove(Map &amp;amp; self, const K &amp;amp; key)   T &amp;amp; getIndex(Map &amp;amp; self, const K &amp;amp; key)   void setIndex(Map &amp;amp; self, const K &amp;amp; key, T value)    Detailed Description #  template &amp;lt;typename Map &amp;gt; class wrenbind17::AbstractMapBindings; Public Types Documentation #  typedef Pair #  typedef Map::value_type wrenbind17::AbstractMapBindings&amp;lt; Map &amp;gt;::Pair; typedef Iterator #  typedef Map::iterator wrenbind17::AbstractMapBindings&amp;lt; Map &amp;gt;::Iterator; typedef T #  typedef Map::mapped_type wrenbind17::AbstractMapBindings&amp;lt; Map &amp;gt;::T; typedef K #  typedef Map::key_type wrenbind17::AbstractMapBindings&amp;lt; Map &amp;gt;::K; Public Functions Documentation #  function bind #  static inline void bind( ForeignModule &amp;amp; m, const std::string &amp;amp; name ) function pairValue #  static inline const T &amp;amp; pairValue( Pair &amp;amp; pair ) function pairKey #  static inline const K &amp;amp; pairKey( Pair &amp;amp; pair ) function iteratorValue #  static inline Pair iteratorValue( Map &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other ) function iterate #  static inline std::variant&amp;lt; bool, Iterator &amp;gt; iterate( Map &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other ) function empty #  static inline bool empty( Map &amp;amp; self ) function size #  static inline size_t size( Map &amp;amp; self ) function clear #  static inline void clear( Map &amp;amp; self ) function count #  static inline size_t count( Map &amp;amp; self ) function containsKey #  static inline bool containsKey( Map &amp;amp; self, const K &amp;amp; key ) function remove #  static inline std::variant&amp;lt; T, std::nullptr_t &amp;gt; remove( Map &amp;amp; self, const K &amp;amp; key ) function getIndex #  static inline T &amp;amp; getIndex( Map &amp;amp; self, const K &amp;amp; key ) function setIndex #  static inline void setIndex( Map &amp;amp; self, const K &amp;amp; key, T value )  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::BadCast</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_bad_cast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_bad_cast/</guid>
      <description>wrenbind17::BadCast #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, exception
Public Functions #      Name      BadCast(std::string msg)    BadCast()    Additional inherited members #  Public Functions inherited from wrenbind17::Exception
    Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation #  function BadCast #  inline explicit BadCast( std::string msg ) function BadCast #  inline BadCast()  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::CompileError</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_compile_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_compile_error/</guid>
      <description>wrenbind17::CompileError #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, exception
Public Functions #      Name      CompileError(std::string msg)    Additional inherited members #  Public Functions inherited from wrenbind17::Exception
    Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation #  function CompileError #  inline explicit CompileError( std::string msg )  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Exception</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_exception/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_exception/</guid>
      <description>wrenbind17::Exception #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from exception
Inherited by wrenbind17::BadCast, wrenbind17::CompileError, wrenbind17::NotFound, wrenbind17::RuntimeError
Public Functions #      Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation #  function what #  inline const char * what() const override function Exception #  inline explicit Exception( std::string msg ) function Exception #  Exception() =default  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignKlass</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass/</guid>
      <description>A foreign class.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignKlassImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_klass_impl/</guid>
      <description>wrenbind17::ForeignKlassImpl #  Module: Wrenbind17
More&amp;hellip;
#include &amp;lt;foreign.hpp&amp;gt;
Inherits from wrenbind17::ForeignKlass
Public Functions #      Name     template &amp;lt;auto Getter&amp;gt;void propReadonlyExt(std::string name) Add a read-only property to this class via a getter.   template &amp;lt;auto Getter,auto Setter&amp;gt;void propExt(std::string name) Add a read-write property to this class via a getter and a setter.   template &amp;lt;auto Getter&amp;gt;void propReadonly(std::string name) Add a read-onlu property to this class via a getter.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignMethod</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method/</guid>
      <description>Holds information about a foreign function of a foreign class.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignMethodImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_method_impl/</guid>
      <description>Type specific implementation of foreign method.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignModule</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_module/</guid>
      <description>wrenbind17::ForeignModule #  Module: Wrenbind17
#include &amp;lt;module.hpp&amp;gt;
Public Functions #      Name     const std::string &amp;amp; getName() const   ForeignKlass &amp;amp; findKlass(const std::string &amp;amp; name)   void append(std::string text)   std::string str() const   template &amp;lt;typename T ,typename&amp;hellip; Others&amp;gt;ForeignKlassImpl&amp;lt; T &amp;gt; &amp;amp; klass(std::string name)   void swap(ForeignModule &amp;amp; other)   ForeignModule &amp;amp; operator=(ForeignModule &amp;amp;&amp;amp; other)   ForeignModule &amp;amp; operator=(const ForeignModule &amp;amp; other)    ~ForeignModule() =default    ForeignModule(ForeignModule &amp;amp;&amp;amp; other)    ForeignModule(const ForeignModule &amp;amp; other)    ForeignModule(std::string name, WrenVM * vm)    Public Functions Documentation #  function getName #  inline const std::string &amp;amp; getName() const function findKlass #  inline ForeignKlass &amp;amp; findKlass( const std::string &amp;amp; name ) function append #  inline void append( std::string text ) function str #  inline std::string str() const function klass #  template &amp;lt;typename T , typename.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignProp</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop/</guid>
      <description>Holds information about a foreign property of a foreign class.</description>
    </item>
    
    <item>
      <title>wrenbind17::ForeignPropImpl</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop_impl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_foreign_prop_impl/</guid>
      <description>wrenbind17::ForeignPropImpl #  Module: Wrenbind17
More&amp;hellip;
#include &amp;lt;foreign.hpp&amp;gt;
Inherits from wrenbind17::ForeignProp
Public Functions #      Name      ~ForeignPropImpl() =default    ForeignPropImpl(std::string name, WrenForeignMethodFn getter, WrenForeignMethodFn setter, const bool isStatic)    Additional inherited members #  Public Functions inherited from wrenbind17::ForeignProp
    Name     bool getStatic() const Returns true if this property is static.</description>
    </item>
    
    <item>
      <title>wrenbind17::Handle</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_handle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_handle/</guid>
      <description>Holds a reference to some Wren type.</description>
    </item>
    
    <item>
      <title>wrenbind17::Map</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_map/</guid>
      <description>Holds native Wren map.</description>
    </item>
    
    <item>
      <title>wrenbind17::Method</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_method/</guid>
      <description>wrenbind17::Method #  Module: Wrenbind17
#include &amp;lt;method.hpp&amp;gt;
Public Functions #      Name     void reset()    operator bool() const   template &amp;lt;typename&amp;hellip; Args&amp;gt;Any operator()(Args &amp;amp;&amp;amp;&amp;hellip; args)    ~Method()    Method(std::shared_ptr&amp;lt; Handle &amp;gt; variable, std::shared_ptr&amp;lt; Handle &amp;gt; handle)    Method() =default    Public Functions Documentation #  function reset #  inline void reset() function operator bool #  inline operator bool() const function operator() #  template &amp;lt;typename.</description>
    </item>
    
    <item>
      <title>wrenbind17::NotFound</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_not_found/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_not_found/</guid>
      <description>wrenbind17::NotFound #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, exception
Public Functions #      Name      NotFound()    Additional inherited members #  Public Functions inherited from wrenbind17::Exception
    Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation #  function NotFound #  inline NotFound()  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::ReturnValue</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_return_value/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_return_value/</guid>
      <description>A return value when calling a Wren function (alias Any)</description>
    </item>
    
    <item>
      <title>wrenbind17::RuntimeError</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_runtime_error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_runtime_error/</guid>
      <description>wrenbind17::RuntimeError #  Module: Wrenbind17
#include &amp;lt;exception.hpp&amp;gt;
Inherits from wrenbind17::Exception, exception
Public Functions #      Name      RuntimeError(std::string msg)    Additional inherited members #  Public Functions inherited from wrenbind17::Exception
    Name     const char * what() const override    Exception(std::string msg)    Exception() =default    Public Functions Documentation #  function RuntimeError #  inline explicit RuntimeError( std::string msg )  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::StdListBindings</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_list_bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_list_bindings/</guid>
      <description>wrenbind17::StdListBindings #  More&amp;hellip;
#include &amp;lt;std.hpp&amp;gt;
Public Types #      Name     typedef std::list&amp;lt; T &amp;gt; List   typedef std::list&amp;lt; T &amp;gt;::iterator Iterator    Public Functions #      Name     void bind(ForeignModule &amp;amp; m, const std::string &amp;amp; name)   bool empty(List &amp;amp; self)   size_t size(List &amp;amp; self)   void clear(List &amp;amp; self)   T pop(List &amp;amp; self)   bool contains(List &amp;amp; self, const T &amp;amp; value)   void insert(List &amp;amp; self, int32_t index, T value)   T removeAt(List &amp;amp; self, int32_t index)   size_t count(List &amp;amp; self)   const T &amp;amp; iteratorValue(List &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other)   std::variant&amp;lt; bool, Iterator &amp;gt; iterate(List &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other)   void add(List &amp;amp; self, T value)   const T &amp;amp; getIndex(List &amp;amp; self, size_t index)   void setIndex(List &amp;amp; self, size_t index, T value)    Detailed Description #  template &amp;lt;typename T &amp;gt; class wrenbind17::StdListBindings; Public Types Documentation #  typedef List #  typedef std::list&amp;lt;T&amp;gt; wrenbind17::StdListBindings&amp;lt; T &amp;gt;::List; typedef Iterator #  typedef std::list&amp;lt;T&amp;gt;::iterator wrenbind17::StdListBindings&amp;lt; T &amp;gt;::Iterator; Public Functions Documentation #  function bind #  static inline void bind( ForeignModule &amp;amp; m, const std::string &amp;amp; name ) function empty #  static inline bool empty( List &amp;amp; self ) function size #  static inline size_t size( List &amp;amp; self ) function clear #  static inline void clear( List &amp;amp; self ) function pop #  static inline T pop( List &amp;amp; self ) function contains #  static inline bool contains( List &amp;amp; self, const T &amp;amp; value ) function insert #  static inline void insert( List &amp;amp; self, int32_t index, T value ) function removeAt #  static inline T removeAt( List &amp;amp; self, int32_t index ) function count #  static inline size_t count( List &amp;amp; self ) function iteratorValue #  static inline const T &amp;amp; iteratorValue( List &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other ) function iterate #  static inline std::variant&amp;lt; bool, Iterator &amp;gt; iterate( List &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other ) function add #  static inline void add( List &amp;amp; self, T value ) function getIndex #  static inline const T &amp;amp; getIndex( List &amp;amp; self, size_t index ) function setIndex #  static inline void setIndex( List &amp;amp; self, size_t index, T value )  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::StdVectorBindings</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_vector_bindings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_std_vector_bindings/</guid>
      <description>wrenbind17::StdVectorBindings #  More&amp;hellip;
#include &amp;lt;std.hpp&amp;gt;
Public Types #      Name     typedef std::vector&amp;lt; T &amp;gt; Vector   typedef std::vector&amp;lt; T &amp;gt;::iterator Iterator    Public Functions #      Name     void bind(ForeignModule &amp;amp; m, const std::string &amp;amp; name)   bool empty(Vector &amp;amp; self)   size_t size(Vector &amp;amp; self)   void clear(Vector &amp;amp; self)   T pop(Vector &amp;amp; self)   bool contains(Vector &amp;amp; self, const T &amp;amp; value)   void insert(Vector &amp;amp; self, int32_t index, T value)   T removeAt(Vector &amp;amp; self, int32_t index)   size_t count(Vector &amp;amp; self)   const T &amp;amp; iteratorValue(Vector &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other)   std::variant&amp;lt; bool, Iterator &amp;gt; iterate(Vector &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other)   void add(Vector &amp;amp; self, T value)   const T &amp;amp; getIndex(Vector &amp;amp; self, size_t index)   void setIndex(Vector &amp;amp; self, size_t index, T value)    Detailed Description #  template &amp;lt;typename T &amp;gt; class wrenbind17::StdVectorBindings; Public Types Documentation #  typedef Vector #  typedef std::vector&amp;lt;T&amp;gt; wrenbind17::StdVectorBindings&amp;lt; T &amp;gt;::Vector; typedef Iterator #  typedef std::vector&amp;lt;T&amp;gt;::iterator wrenbind17::StdVectorBindings&amp;lt; T &amp;gt;::Iterator; Public Functions Documentation #  function bind #  static inline void bind( ForeignModule &amp;amp; m, const std::string &amp;amp; name ) function empty #  static inline bool empty( Vector &amp;amp; self ) function size #  static inline size_t size( Vector &amp;amp; self ) function clear #  static inline void clear( Vector &amp;amp; self ) function pop #  static inline T pop( Vector &amp;amp; self ) function contains #  static inline bool contains( Vector &amp;amp; self, const T &amp;amp; value ) function insert #  static inline void insert( Vector &amp;amp; self, int32_t index, T value ) function removeAt #  static inline T removeAt( Vector &amp;amp; self, int32_t index ) function count #  static inline size_t count( Vector &amp;amp; self ) function iteratorValue #  static inline const T &amp;amp; iteratorValue( Vector &amp;amp; self, std::shared_ptr&amp;lt; Iterator &amp;gt; other ) function iterate #  static inline std::variant&amp;lt; bool, Iterator &amp;gt; iterate( Vector &amp;amp; self, std::variant&amp;lt; std::nullptr_t, Iterator &amp;gt; other ) function add #  static inline void add( Vector &amp;amp; self, T value ) function getIndex #  static inline const T &amp;amp; getIndex( Vector &amp;amp; self, size_t index ) function setIndex #  static inline void setIndex( Vector &amp;amp; self, size_t index, T value )  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
    <item>
      <title>wrenbind17::Variable</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_variable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_variable/</guid>
      <description>Holds some Wren variable which can be a class or class instance.</description>
    </item>
    
    <item>
      <title>wrenbind17::VM</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m/</guid>
      <description>Holds the entire Wren VM from which all of the magic happens.</description>
    </item>
    
    <item>
      <title>wrenbind17::VM::Data</title>
      <link>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m_1_1_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matusnovak.github.io/wrenbind17/classes/classwrenbind17_1_1_v_m_1_1_data/</guid>
      <description>wrenbind17::VM::Data #  #include &amp;lt;vm.hpp&amp;gt;
Public Functions #      Name     void setNextError(std::string str)   std::string getLastError()   detail::ForeignPtrConvertor * getClassCast(const size_t hash, const size_t other)   void addClassCast(std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; convertor, const size_t hash, const size_t other)   bool isClassRegistered(const size_t hash) const   void getClassType(std::string &amp;amp; module, std::string &amp;amp; name, const size_t hash)   void addClassType(const std::string &amp;amp; module, const std::string &amp;amp; name, const size_t hash)    Public Attributes #      Name     LoadFileFn loadFileFn   PrintFn printFn   std::string nextError   std::string lastError   std::unordered_map&amp;lt; std::pair&amp;lt; size_t, size_t &amp;gt;, std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; &amp;gt; classCasting   std::unordered_map&amp;lt; size_t, std::string &amp;gt; classToName   std::unordered_map&amp;lt; size_t, std::string &amp;gt; classToModule   std::unordered_map&amp;lt; std::string, ForeignModule &amp;gt; modules   std::vector&amp;lt; std::string &amp;gt; paths   WrenConfiguration config   std::shared_ptr&amp;lt; WrenVM &amp;gt; vm    Public Functions Documentation #  function setNextError #  inline void setNextError( std::string str ) function getLastError #  inline std::string getLastError() function getClassCast #  inline detail::ForeignPtrConvertor * getClassCast( const size_t hash, const size_t other ) function addClassCast #  inline void addClassCast( std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; convertor, const size_t hash, const size_t other ) function isClassRegistered #  inline bool isClassRegistered( const size_t hash ) const function getClassType #  inline void getClassType( std::string &amp;amp; module, std::string &amp;amp; name, const size_t hash ) function addClassType #  inline void addClassType( const std::string &amp;amp; module, const std::string &amp;amp; name, const size_t hash ) Public Attributes Documentation #  variable loadFileFn #  LoadFileFn loadFileFn; variable printFn #  PrintFn printFn; variable nextError #  std::string nextError; variable lastError #  std::string lastError; variable classCasting #  std::unordered_map&amp;lt; std::pair&amp;lt; size_t, size_t &amp;gt;, std::shared_ptr&amp;lt; detail::ForeignPtrConvertor &amp;gt; &amp;gt; classCasting; variable classToName #  std::unordered_map&amp;lt; size_t, std::string &amp;gt; classToName; variable classToModule #  std::unordered_map&amp;lt; size_t, std::string &amp;gt; classToModule; variable modules #  std::unordered_map&amp;lt; std::string, ForeignModule &amp;gt; modules; variable paths #  std::vector&amp;lt; std::string &amp;gt; paths; variable config #  WrenConfiguration config; variable vm #  std::shared_ptr&amp;lt; WrenVM &amp;gt; vm;  Updated on 28 December 2020 at 15:45:23 UTC</description>
    </item>
    
  </channel>
</rss>